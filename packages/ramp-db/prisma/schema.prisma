// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Ramp API Models (Database Schema) -----------------------------------------

/// Accounting GL Accounts (https://ramp.com/developer/v1/accounting-gl-accounts)
model AccountingGLAccount {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Accounting GL Account
  id                       String                             @id
  /// Classification of this Accounting GL Account
  classification           AccountingGLAccountClassification?
  /// Code for this Accounting GL Account (our GL account number ?)
  code                     String?
  /// Date/time this Accounting GL Account was created (ISO8601 format)
  created_at               String?
  /// Remote/external category from the ERP system
  gl_account_category_id   String?
  /// Name of the accounting category in the ERP system
  gl_account_category_name String?
  /// Unique Ramp ID of the accounting category
  gl_account_ramp_id       String?
  /// Is this Accounting GL Account active?
  is_active                Boolean?
  /// Name of this Accounting GL Account
  name                     String
  /// Date/time this Accounting GL Account was last updated (ISO8601 format)
  updated_at               String?

  // Potential Relationships -------------------------------------------------

  // Actual Relationships ----------------------------------------------------

  @@map("accounting_gl_accounts")
}

enum AccountingGLAccountClassification {
  ANY
  ASSET
  CREDCARD
  EQUITY
  EXPENSE
  LIABILITY
  REVENUE
  UNKNOWN
}

/// Cards (https://ramp.com/developer/v1/cards)
model Card {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Card
  id                     String     @id
  /// Card holder's full name
  cardholder_name        String?
  /// Card Program ID
  card_program_id        String?
  /// Date/time this card was created (ISO8601 format)
  created_at             String?
  /// Cosmetic display name of the Card
  display_name           String
  /// Expiration date of the Card (MMYY)
  expiration             String
  // TODO - Skipping fulfillment
  /// Has the Card overridden the default settings for this Card Program?
  has_program_overridden Boolean
  /// Is this Card a physical card?
  is_physical            Boolean?
  /// Last four digits of the Card number
  last_four              String
  /// Current state of this Card
  state                  CardState?

  // Potential Relationships -------------------------------------------------

  /// Unique ID of the business Entity that the Card belongs to
  entity_id String?

  // Actual Relationships ----------------------------------------------------

  /// Unique ID of the Cardholder (User) that this Card belongs to
  cardholder_id         String?
  cardholder            User?                     @relation(fields: [cardholder_id], references: [id], onDelete: Cascade)
  // The LimitCards associated with this Card
  limit_cards           LimitCard[]
  /// Spending restrictions for this Card (1:1 relationship)
  spending_restrictions CardSpendingRestrictions?
  /// Transactions for this Card
  transactions          Transaction[]

  @@map("cards")
}

/// Current state of this Card
enum CardState {
  ACTIVE
  CHIP_LOCKED
  SUSPENDED
  TERMINATED
  UNACTIVATED
}

/// Card Spending Restrictions (part of https://ramp.com/developer/v1/cards)
model CardSpendingRestrictions {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Card Spending Restrictions (same as RampCard.id)
  card_id                  String                                 @id
  /// Amount limit total per interval
  amount                   Int?
  /// Date to automatically lock the card (ISO 8601 format)
  /// NOTE: This is not the same as the card expiration date
  auto_lock_date           String?
  /// Comma-separated list of blocked Ramp categories
  blocked_categories       String?
  /// Comma-separated list of allowed Ramp categories
  categories               String?
  /// Date/time this Spending Restrictions was created (ISO8601 format)
  interval                 CardSpendingLimitRestrictionsInterval?
  /// Whether this card has been locked
  suspended                Boolean?
  /// Maximum amount limit per transaction
  transaction_amount_limit Int?

  // Actual Relationships ----------------------------------------------------

  /// The Card that this Spending Restrictions belongs to (1:1 relationship)
  card Card? @relation(fields: [card_id], references: [id], onDelete: Cascade)

  @@map("cards_spending_restrictions")
}

/// Time limit interval that spending restrictions apply to
/// for a Ramp Card.
enum CardSpendingLimitRestrictionsInterval {
  ANNUAL
  DAILY
  MONTHLY
  QUARTERLY
  TERTIARY
  TOTAL
  WEEKLY
  YEARLY
}

/// Departments (https://ramp.com/developer/v1/departments)
model Department {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Department
  id   String @id
  /// Name of this Department
  name String

  // Relationships -----------------------------------------------------------

  /// Users belonging to this Department
  users User[]

  @@map("departments")
}

// Limits (https://ramp.com/developer/v1/limits)
model Limit {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Limit
  id                               String      @id
  /// Balance cleared (amount)
  balance_cleared_amt              Int?
  /// Balance cleared (currency_code)
  balance_cleared_cc               String?
  /// Balance pending (amount)
  balance_pending_amt              Int?
  /// Balance pending (currency_code)
  balance_pending_cc               String?
  /// Balance total (amount)
  balance_total_amt                Int?
  /// Balance total (currency_code)
  balance_total_cc                 String?
  /// Date/time this Limit was created (ISO8601 format)
  created_at                       String?
  /// Cosmetic display name of the Limit
  display_name                     String?
  /// Does Limit's settings override those of its spend program?
  has_program_overridden           Boolean?
  /// Is the spend limit shareable?
  is_shareable                     Boolean?
  /// Can the user's physical card be linked to this Limit?
  permitted_primary_card_enabled   Boolean?
  /// Can reimbursements be submitted against this Limit?
  permitted_reimbursements_enabled Boolean?
  /// Current state of this Limit
  state                            LimitState?
  /// Suspension -- acting User ID
  suspension_acting_user_id        String?
  /// Suspension -- date/time this suspenstion was created (ISO8601 format)
  suspension_inserted_at           String?
  /// Suspension -- was this suspension by Ramp?
  suspension_suspended_by_ramp     Boolean?

  // Potential Relationships -------------------------------------------------

  /// Unique ID of the business Entity that the Limit belongs to
  entity_id String?

  // Actual Relationships ----------------------------------------------------

  /// Info about Cards that belong to this Limit
  cards                 LimitCard[]
  /// Unique ID of the spend program that this Limit is associated with
  spend_program_id      String?
  spend_program         SpendProgram?              @relation(fields: [spend_program_id], references: [id], onDelete: Cascade)
  /// Spending restrictions for this Limit (1:1 relationship)
  spending_restrictions LimitSpendingRestrictions?
  /// Info about Users that belong to this Limit
  users                 LimitUser[]

  @@map("limits")
}

enum LimitRestrictionInterval {
  ANNUAL
  DAILY
  MONTHLY
  QUARTERLY
  TERTIARY
  TOTAL
  WEEKLY
  YEARLY
}

enum LimitState {
  ACTIVE
  SUSPENDED
  TERMINATED
}

// Cards belonging to a Limit (https://ramp.com/developer/v1/limits)
model LimitCard {
  // Scalar Fields -----------------------------------------------------------

  /// Expiration date of the LimitCard (MMYY)
  expiration                 String
  /// Was this card created manually by Ramp for high velocity spend?
  is_ap_card                 Boolean
  /// Last four digits of the LimitCard number
  last_four                  String
  /// Was this card creaed by "New Product or Service" option?
  via_new_product_or_service Boolean

  // Potential Relationships -------------------------------------------------

  // Actual Relationships ----------------------------------------------------

  /// Unique ID of the Card that this LimitCard belongs to
  card_id  String
  card     Card   @relation(fields: [card_id], references: [id], onDelete: Cascade)
  /// Unique ID of the Limit that this LimitCard belongs to
  limit_id String
  limit    Limit  @relation(fields: [limit_id], references: [id], onDelete: Cascade)

  @@id([limit_id, card_id])
  @@map("limits_cards")
}

/// Limit Spending Restrictions (part of https://ramp.com/developer/v1/limits)
model LimitSpendingRestrictions {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Limit Spending Restrictions (same as Limit.id)
  limit_id                     String                                  @id
  /// Comma-separated list of allowed Ramp categories
  allowed_categories           String?
  /// "|" separated list of allowed vendors
  allowed_vendors              String?
  /// Date to automatically lock the card (ISO 8601 format)
  /// NOTE: This is not the same as the card expiration date
  auto_lock_date               String?
  /// Comma-separated list of blocked Ramp categories
  blocked_categories           String?
  /// "|" separated list of blocked vendors
  blocked_vendors              String?
  /// Date/time this Spending Restrictions was created (ISO8601 format)
  interval                     LimitSpendingLimitRestrictionsInterval?
  /// Amount limit total per interval (amount)
  limit_amt                    Int
  /// Amount limit total per interval (currency_code)
  limit_cc                     String
  /// Date and time of next interval reset (ISO 8601 format)
  next_interval_reset          String?
  /// Date and time of start of current interval (ISO 8601 format)
  start_of_interval            String?
  /// Temporary limit total per interval (amount)
  temporary_limit_amt          Int?
  /// Temporary limit total per interval (currency_code)
  temporary_limit_cc           String?
  /// Per-transaction amount limit (amount)
  transaction_amount_limit_amt Int?
  /// Per-transaction amount limit (currency_code)
  transaction_amount_limit_cc  String?

  /// Whether this card has been locked
  suspended Boolean?

  // Actual Relationships ----------------------------------------------------

  /// The Limit that this Spending Restrictions belongs to (1:1 relationship)
  limit Limit @relation(fields: [limit_id], references: [id], onDelete: Cascade)

  @@map("limits_spending_restrictions")
}

/// Time limit interval that spending restrictions apply to
/// for a Ramp Card.
enum LimitSpendingLimitRestrictionsInterval {
  ANNUAL
  DAILY
  MONTHLY
  QUARTERLY
  TERTIARY
  TOTAL
  WEEKLY
  YEARLY
}

// Users that can spend from the Limit
model LimitUser {
  // Actual Relationships ----------------------------------------------------

  /// Unique ID of the Limit that this LimitUser belongs to
  limit_id String
  limit    Limit  @relation(fields: [limit_id], references: [id], onDelete: Cascade)
  /// Unique ID of the User that this LimitUser belongs to
  user_id  String
  User     User?  @relation(fields: [user_id], references: [id])

  @@id([limit_id, user_id])
  @@map("limits_users")
}

// Spend Programs (https://ramp.com/developer/v1/spend-programs)
model SpendProgram {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Spend Program
  id                                        String                    @id
  /// Description of this Spend Program
  description                               String?
  /// Display Name of this Spend Program
  display_name                              String?
  /// Is the Spend Program shareable
  is_shareable                              Boolean?
  /// Should the Spend Program issue a physical card if needed?
  issue_physical_card_if_needed             Boolean?
  /// Can the user's physical card be linked to this Limit?
  permitted_primary_card_enabled            Boolean?
  /// Can reimbursements be submitted against this Limit?
  permitted_reimbursements_enabled          Boolean?
  /// Restrictions -- allowed Ramp Categories (comma-separated list of category IDs)
  restrictions_allowed_categories           String?
  // TODO - skipped restrictions.allowed_vendors
  /// Restrictions -- Date to automatically lock the Limit (ISO 8601 format?)
  restrictions_auto_lock_date               String?
  /// Restrictions -- Blocked Ramp Categories (comma-separated list of category codes)
  restrictions_blocked_categories           String?
  // TODO - skipped restrictions.blocked_vendors
  /// Restrictions -- Time interval the limit is applied on
  restrictions_interval                     LimitRestrictionInterval?
  /// Restrictions -- Limit (amount)
  restrictions_limit_amt                    Int?
  /// Restrictions -- Limit (currency_code)
  restrictions_limit_cc                     String?
  /// Restrictions -- Date and time of next interval reset (ISO 8601 format)
  restrictions_next_interval_reset          String?
  /// Restrictions -- Date and time of start of current interval (ISO 8601 format)
  restrictions_start_of_interval            String?
  /// Restrictions -- Temporary Limit (amount)
  restrictions_temporary_limit_amt          Int?
  /// Restrictions -- Temporary Limit (currency_code)
  restrictions_temporary_limit_cc           String?
  /// Restrictions -- Transaction Amount Limit (amount)
  restrictions_transaction_amount_limit_amt Int?
  /// Restrictions -- Transaction Amount Limit (currency_code)
  restrictions_transaction_amount_limit_cc  String?

  // Potential Relationships -------------------------------------------------

  // Actual Relationships ----------------------------------------------------

  /// Limits that belong to this Spend Program
  limits Limit[]

  @@map("spend_programs")
}

// Transactions (https://ramp.com/developer/v1/transactions)
model Transaction {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Transaction
  id                              String                @id
  // TODO - skipping accounting_categories (Deprecated)
  /// Date for this transaction for accounting purposes
  accounting_date                 String?
  /// Settled amount of the Transaction (amount)
  amount_amt                      Int?
  /// Settled amount of the Transaction (currency_code)
  amount_cc                       String?
  // TODO - skipping attendees
  /// Was the transaction processed using a card present terminal?
  card_present                    Boolean?
  // TODO - skipping decline_details
  // TODO - skipping disputes
  /// Optional memo for this Transaction
  memo                            String?
  /// Merchant category code (ISP 18245) classifying types of goods and services
  merchant_category_code          String?
  /// Description of the merchant category code
  merchant_category_description   String?
  // TODO - skipping merchant_data
  // TODO - skipping merchant_descriptor
  // TODO - skipping merchant_location
  /// Name of the Merchant that the Transaction belongs to
  merchant_name                   String?
  /// Original Amount of the Transaction (amount)
  original_transaction_amount_amt Int?
  /// Original Amount of the Transaction (currency_code)
  original_transaction_amount_cc  String?
  // TODO - skipping policy_violations (TOFIX?)
  // TODO - skipping receipts (TOFIX?)
  // Date/time this transaction was settled (ISO8601 format)
  settlement_date                 String?
  /// Ramp-internal category ID
  sk_category_id                  String?
  /// Ramp-internal category name
  sk_category_name                String?
  // Transaction state
  state                           TransactionState?
  /// Synchronization status of this Transaction
  sync_status                     TransactionSyncStatus
  /// Date/time this transaction was synced (ISO8601 format)
  synced_at                       String?
  /// Trip name (if available)
  trip_name                       String?
  /// User transaction date/time
  user_transaction_time           String?

  // Potential Relationships -------------------------------------------------

  /// Unique ID of the Entity that the Transaction belongs to
  entity_id        String?
  /// Unique ID of the spend limit associated with the Transaction TODO - TOFIX?
  limit_id         String?
  /// Unique ID of the Merchant that the Transaction belongs to
  merchant_id      String?
  /// Unique ID of the spend program from which this limit was issued
  spend_program_id String?
  /// Statement ID of the Transaction (if available)
  statement_id     String?
  /// Unique ID of the trip assocated with this Transaction
  trip_id          String?

  // Actual Relationships ----------------------------------------------------

  /// Accounting field selections for this Transaction
  accounting_field_selections           TransactionAccountingFieldSelection[]
  /// User ID of the User that is the card holder of this Transaction
  card_holder_user_id                   String?
  card_holder_user                      User?                                         @relation(fields: [card_holder_user_id], references: [id], onDelete: Cascade)
  /// Card that this Transaction belongs to
  card_id                               String?
  card                                  Card?                                         @relation(fields: [card_id], references: [id], onDelete: Cascade)
  /// Line items for this Transaction
  line_items                            TransactionLineItem[]
  /// Line item accounting field selections for this Transaction
  line_item_accounting_field_selections TransactionLineItemAccountingFieldSelection[]

  @@map("transactions")
}

// TransactionAccountingFieldSelection
model TransactionAccountingFieldSelection {
  // Scalar Fields -----------------------------------------------------------

  /// Ramp ID of the accounting field option (id in the Ramp API)
  ramp_id                   String
  /// Category Info: External ID of accounting field
  category_info_external_id String?
  /// Category Info: ID of accounting field (within Ramp)
  category_info_id          String?
  /// Category Info: Name of accounting field
  category_info_name        String?
  /// Category Info: Type of accounting field
  category_info_type        TransactionAccountingFieldType?
  /// External code of the accounting field option (displayed on the ERP)
  external_code             String?
  /// External ID of the accounting field option (displayed on the ERP)
  external_id               String?
  /// Name of the accounting field option
  name                      String?
  /// Source type that added this selection
  source_type               String?
  /// Type of the accounting field option
  type                      TransactionAccountingFieldType?

  // Potential Relationships -------------------------------------------------

  // Actual Relationships ----------------------------------------------------

  /// Unique ID of the Transaction that this field selection belongs to
  transaction_id String
  transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@id([transaction_id, ramp_id])
  @@map("transactions_accounting_field_selections")
}

// Transaction Line Item (part of https://ramp.com/developer/v1/transactions)
model TransactionLineItem {
  // Scalar Fields -----------------------------------------------------------

  /// Amount of the line item (amount)
  amount_amt           Int?
  /// Amount of the line item (currency_code)
  amount_cc            String?
  /// Converted amount of the line item (amount)
  converted_amount_amt Int?
  /// Converted amount of the line item (currency_code)
  converted_amount_cc  String?
  /// Optional memo of the line item
  memo                 String?

  // Potential Relationships -------------------------------------------------

  // Actual Relationships ----------------------------------------------------

  /// Zero-relative index of the line item in the transaction
  index_line_item             Int
  /// Unique ID of the Transaction that this line item belongs to
  transaction_id              String
  transaction                 Transaction                                   @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  /// The accounting field selections for this line item
  accounting_field_selections TransactionLineItemAccountingFieldSelection[]

  @@id([transaction_id, index_line_item])
  @@map("transactions_line_items")
}

// Transaction Accounting Field Type for Line Items (part of https://ramp.com/developer/v1/transactions)
model TransactionLineItemAccountingFieldSelection {
  // Scalar Fields -----------------------------------------------------------

  /// Category Info: External ID of accounting field
  category_info_external_id String?
  /// Category Info: ID of accounting field (within Ramp)
  category_info_id          String?
  /// Category Info: Name of accounting field
  category_info_name        String?
  /// Category Info: Type of accounting field
  category_info_type        TransactionAccountingFieldType?
  /// External code of the accounting field option (displayed on the ERP)
  external_code             String?
  /// External ID of the accounting field (displayed on the ERP)
  external_id               String?
  /// Name of the accounting field
  name                      String?
  /// Source type that added this selection
  source_type               String?
  /// Type of the accounting field
  type                      TransactionAccountingFieldType?

  // Potential Relationships -------------------------------------------------

  // Actual Relationships ----------------------------------------------------

  /// Zero-relative index of the line item in the transaction
  index_line_item       Int
  /// Ramp ID of the accounting field option (id in the Ramp API)
  ramp_id               String
  /// Unique ID of the Transaction
  transaction_id        String
  transaction           Transaction         @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  // Transaction Line Item that this Accounting Field Selection belongs to
  transaction_line_item TransactionLineItem @relation(fields: [transaction_id, index_line_item], references: [transaction_id, index_line_item], onDelete: Cascade)

  @@id([transaction_id, index_line_item, ramp_id])
  @@map("transactions_line_items_accounting_field_selections")
}

/// Transaction Accounting Field Type
enum TransactionAccountingFieldType {
  AMORTIZATION_TEMPLATE
  BILLABLE
  COST_CENTER
  CUSTOMERS_JOBS
  DEFERRAL_CODE
  EXPENSE_ENTITY
  GL_ACCOUNT
  INVENTORY_ITEM
  JOURNAL
  MERCHANT
  OTHER
  PROJECT
  REPORTING_TAG
  SUBSIDIARY
  TAX_CODE
}

/// Transaction state
enum TransactionState {
  ALL
  CLEARED
  COMPLETION
  DECLINED
  ERROR
  PENDING
  PENDING_INITIATION
}

/// Transaction sync status
enum TransactionSyncStatus {
  NOT_SYNC_READY
  SYNCED
  SYNC_READY
}

// Users (https://ramp.com/developer/v1/users)
model User {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this User
  id          String   @id
  // TODO - Skipping custom_fields (TOFIX?)
  /// The User's email address
  email       String
  /// Alternative ID for an employee, from an external system
  employee_id String?
  /// First name of the User
  first_name  String?
  /// Is this User a Manager?
  is_manager  Boolean?
  /// Last name of the User
  last_name   String?
  /// The User's phone number
  phone       String?

  // Potential Relationships -------------------------------------------------

  /// Unique ID of the business Entity that the User belongs to
  entity_id   String?
  /// Unique ID of the User's physical location
  location_id String?
  /// Unique ID of the User's manager
  manager_id  String?
  /// The User's role
  role        UserRole?
  /// The User's status
  status      UserStatus

  // Actual Relationships ----------------------------------------------------

  /// Cards this User has
  cards         Card[]
  /// Unique ID of the Department that the User belongs to
  department_id String?
  department    Department?   @relation(fields: [department_id], references: [id])
  /// Limits this User belongs to
  limit_users   LimitUser[]
  /// Transactions this User is the cardholder for
  transactions  Transaction[]

  @@map("users")
}

/// Role of a User
enum UserRole {
  ADVISOR_CONSOLE_ADMIN
  ADVISOR_CONSOLE_USER
  AUDITOR
  BUSINESS_ADMIN
  BUSINESS_BOOKKEEPER
  BUSINESS_OWNER
  BUSINESS_USER
  DEVELOPER_ADMIN
  GUEST_USER
  IT_ADMIN
  PRESALES_DEMO_USER
  UNBUNDLED_ADMIN
  UNBUNDLED_BOOKKEEPER
  UNBUNDLED_OWNER
  UNBUNDLED_USER
  VENDOR_NETWORK_ADMIN
}

/// Status of a User
enum UserStatus {
  INVITE_EXPIRED
  INVITE_PENDING
  USER_ACTIVE
  USER_INACTIVE
  USER_ONBOARDING
  USER_SUSPENDED
}

// Violations of Foreign Key Constraints -------------------------------------
// (Recorded during a refresh)
model Violation {
  from_model String
  from_id    String
  to_model   String
  to_id      String

  @@id([from_model, from_id, to_model, to_id])
  @@map("violations")
}
