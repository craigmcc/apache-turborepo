// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Ramp API Models (Database Schema) -----------------------------------------

/// Cards (https://ramp.com/developer/v1/cards) TODO - maybe migrate to Limits?
model Card {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Card
  id                     String     @id
  /// Card holder's full name
  cardholder_name        String?
  /// Card Program ID
  card_program_id        String?
  /// Date/time this card was created (ISO8601 format)
  created_at             String?
  /// Cosmetic display name of the Card
  display_name           String
  /// Expiration date of the Card (MMYY)
  expiration             String
  // TODO - Skipping fulfillment
  /// Has the Card overridden the default settings for this Card Program?
  has_program_overridden Boolean
  /// Is this Card a physical card?
  is_physical            Boolean?
  /// Last four digits of the Card number
  last_four              String
  // TODO - Skipping spending_restrictions
  /// Current state of this Card
  state                  CardState?

  // Potential Relationships -------------------------------------------------

  /// Unique ID of the business Entity that the Card belongs to
  entity_id String?

  // Actual Relationships ----------------------------------------------------

  /// Unique ID of the Cardholder (User) that this Card belongs to
  cardholder_id         String
  /// User? that this Card belongs to
  cardholder            User?                     @relation(fields: [cardholder_id], references: [id], onDelete: Cascade)
  /// Spending restrictions for this Card (1:1 relationship)
  spending_restrictions CardSpendingRestrictions? @relation()
  /// Transactions for this Card
  Transaction           Transaction[]

  @@map("cards")
}

/// Current state of this Card
enum CardState {
  ACTIVE
  CHIP_LOCKED
  SUSPENDED
  TERMINATED
  UNACTIVATED
}

/// Card Spending Restrictions (part of https://ramp.com/developer/v1/cards)
model CardSpendingRestrictions {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Card Spending Restrictions (same as RampCard.id)
  card_id                  String                                 @id
  /// Amount limit total per interval
  amount                   Int?
  /// Date to automatically lock the card (ISO 8601 format)
  /// NOTE: This is not the same as the card expiration date
  auto_lock_date           String?
  /// Skipping blocked_categories (Array of ints not supported)
  /// Skipping caegories (Array of ints not supported)
  interval                 CardSpendingLimitRestrictionsInterval?
  /// Whether this card has been locked
  suspended                Boolean?
  /// Maximum amount limit per transaction
  transaction_amount_limit Int?

  // Actual Relationships ----------------------------------------------------

  /// The Card that this Spending Restrictions belongs to (1:1 relationship)
  card Card? @relation(fields: [card_id], references: [id], onDelete: Cascade)

  @@map("cards_spending_restrictions")
}

/// Time limit interval that spending restrictions apply to
/// for a Ramp Card.
enum CardSpendingLimitRestrictionsInterval {
  ANNUAL
  DAILY
  MONTHLY
  QUARTERLY
  TERTIARY
  TOTAL
  WEEKLY
  YEARLY
}

/// Departments (https://ramp.com/developer/v1/departments)
model Department {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Department
  id   String @id
  /// Name of this Department
  name String

  // Relationships -----------------------------------------------------------

  /// Users belonging to this Department
  users User[]

  @@map("departments")
}

// Transactions (https://ramp.com/developer/v1/transactions)
model Transaction {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this Transaction
  id                            String                @id
  /// Date for this transaction for accounting purposes
  accounting_date               String?
  // TODO - skipping accounting_field_selections but likely need them
  /// Settled amount of the Transaction (amount, currency_code)
  amount                        Json?
  // TODO - skipping attendees
  // TODO - skipping card_holder but likely need it
  /// Was the transaction processed using a card present terminal?
  card_present                  Boolean?
  /// Currency that the transaction settled in
  currency_code                 String?
  // TODO - skipping decline_details
  // TODO - skipping disputes
  // TODO - skipping line_items
  /// Optional memo for this Transaction
  memo                          String?
  /// Merchant category code (ISP 18245) classifying types of goods and services
  merchant_category_code        String?
  /// Description of the merchant category code
  merchant_category_description String?
  // TODO - skipping merchant_data
  // TODO - skipping merchant_descriptor
  // TODO - skipping merchant_location
  /// Name of the Merchant that the Transaction belongs to
  merchant_name                 String?
  /// Original Amount of the Transaction (amount, currency_code)
  original_transaction_amount   Json?
  // TODO - skipping policy_violations
  // TODO - skipping receipts
  // Date/time this transaction was settled (ISO8601 format)
  settlement_date               String?
  /// Ramp-internal category ID
  sk_category_id                String?
  /// Ramp-internal category name
  sk_category_name              String?
  /// Synchronization status of this Transaction
  sync_status                   TransactionSyncStatus
  /// Date/time this transaction was synced (ISO8601 format)
  synced_at                     String?

  // Potential Relationships -------------------------------------------------

  /// Unique ID of the Entity that the Transaction belongs to
  entity_id             String?
  /// Unique ID of the spend limit associated with the Transaction
  limit_id              String?
  /// Unique ID of the Merchant that the Transaction belongs to
  merchant_id           String?
  /// Unique ID of the spend program from which this limit was issued
  spend_program_id      String?
  /// Unique ID of the trip assocated with this Transaction
  trip_id               String?
  /// Trip name associated with this Transaction
  trip_name             String?
  /// User transaction time
  user_transaction_time String?

  // Actual Relationships ----------------------------------------------------

  /// Card that this Transaction belongs to
  card_id String
  /// Card that this Transaction belongs to
  card    Card?  @relation(fields: [card_id], references: [id], onDelete: Cascade)

  @@map("transactions")
}

/// Transaction state
enum TransactionState {
  ALL
  CLEARED
  COMPLETION
  DECLINED
  ERROR
  PENDING
  PENDING_INITIATION
}

/// Transaction sync status
enum TransactionSyncStatus {
  NOT_SYNC_READY
  SYNCED
  SYNC_READY
}

// Users (https://ramp.com/developer/v1/users)
model User {
  // Scalar Fields -----------------------------------------------------------

  /// Primary key for this User
  id          String   @id
  // TODO - Skipping custom_fields
  /// The User's email address
  email       String
  /// Alternative ID for an employee, from an external system
  employee_id String?
  /// First name of the User
  first_name  String?
  /// Is this User a Manager?
  is_manager  Boolean?
  /// Last name of the User
  last_name   String?
  /// The User's phone number
  phone       String?

  // Potential Relationships -------------------------------------------------

  /// Unique ID of the business Entity that the User belongs to
  entity_id   String?
  /// Unique ID of the User's physical location
  location_id String?
  /// Unique ID of the User's manager
  manager_id  String? /// TODO - maybe circular to this table?
  /// The User's role
  role        UserRole?
  /// The User's status
  status      UserStatus

  // Actual Relationships ----------------------------------------------------

  /// Cards this User has
  cards Card[]

  /// Unique ID of the Department that the User belongs to
  department_id String?
  /// Department that the User belongs to
  department    Department? @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@map("users")
}

/// Role of a User
enum UserRole {
  ADVISOR_CONSOLE_ADMIN
  ADVISOR_CONSOLE_USER
  AUDITOR
  BUSINESS_ADMIN
  BUSINESS_BOOKKEEPER
  BUSINESS_OWNER
  BUSINESS_USER
  DEVELOPER_ADMIN
  GUEST_USER
  IT_ADMIN
  PRESALES_DEMO_USER
  UNBUNDLED_ADMIN
  UNBUNDLED_BOOKKEEPER
  UNBUNDLED_OWNER
  UNBUNDLED_USER
  VENDOR_NETWORK_ADMIN
}

/// Status of a User
enum UserStatus {
  INVITE_EXPIRED
  INVITE_PENDING
  USER_ACTIVE
  USER_INACTIVE
  USER_ONBOARDING
  USER_SUSPENDED
}
